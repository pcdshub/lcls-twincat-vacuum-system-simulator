<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_TurboPump" Id="{d3522d41-e3aa-48c2-8bb3-29501d4aeb56}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TurboPump
VAR_INPUT
	RunUpTime	:	TIME := T#30S; //How long it should take for the pump to reach full speed
	OverloadTime	:	TIME := T#1S; //How long a pump will take to overload
	OverTempTime	:	TIME := T#30s; //How long a pump takes to heat up
END_VAR
VAR_IN_OUT
	stVlInlet : ST_Volume;
	stVlOutlet	:	ST_Volume;
	stPump	:	ST_MechPump;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	rLoadFactor : REAL := 0.8; //
	xOverloaded	:	BOOL;
	rMaxMRR : REAL := 0.8; //arbitrary for now
	xPump	:	BOOL;
	rInletPressDelta: REAL; //Inlet pressure change in one cycle
	rMassTrans: REAL; //Mass transfered through the pump in one cycle
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.PumpLogic();]]></ST>
    </Implementation>
    <Method Name="PumpLogic" Id="{5265bccf-087a-4ce1-9020-c355b5ecfbc5}">
      <Declaration><![CDATA[METHOD PumpLogic : BOOL
VAR_INPUT
END_VAR
VAR
	local :BOOL;
	rSpeedFactor: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
Pfeiffer Turbo Pump

A turbo pump reduces the pressure of a volume at a certain rate, mass-removal-rate(pressure,speed,tc).
The pump does this by removing mass from the inlet volume, and transferring it to the outlet volume.
This value is linear for now, but can be calculated from a non-linear expression later...
It has a limit to how much power it can consume before causing an error.
Other limits can be programmed later, perhaps something to simulate cooling issues...

When a turbo is not spinning, it is simply a low-conductance tube. For now, we are ignoring
conductance, so we'll go ahead and say, if a turbo is not spinning, it is like an open valve...
*)
(* Pump speed *)
stPump.tonSpd.IN := xPump;
stPump.tonSpd.PT := RunUpTime; 
stPump.tonSpd(Q=>stPump.q_xAtSpd);
stPump.q_iSpeed := REAL_TO_INT(LIMIT(0,TIME_TO_REAL(stPump.tonSpd.ET)/TIME_TO_REAL(RunUpTime),1) * INT_TO_REAL(stPump.iMaxSpd) );

(* Start signal loopback *)
stPump.q_xStart := stPump.i_xRun;
IF stPump.q_xAtSpd THEN
	stPump.q_xStart := FALSE;
END_IF

(* Pump load *)
(*
We claim that pump load is a function of speed and pressure.
If the pump gets overloaded, it shuts off.
This function is a normalized measure of how loaded the pump is.
Normalized pump speed +  
Pump load is also increased by having a high foreline pressure. If the inlet pressure is low, then the foreline
pressure can be quite high, without affecting the pump too badly.
*)
//stPump.rLoad := LIMIT( 0, (INT_TO_REAL(stPump.q_iSpeed) / INT_TO_REAL(stPump.iMaxSpd)) + 
//					(stVlInlet.rPressure/ATM) - rLoadFactor, 1);
IF xPump THEN
	stPump.rLoad := LIMIT( 0, (stVlInlet.rPressure/ATM + stVlOutlet.rPressure/ATM + ( (INT_TO_REAL(stPump.iMaxSpd)- INT_TO_REAL(stPump.q_iSpeed) ) / INT_TO_REAL(stPump.iMaxSpd)))/3 , 1);
ELSE
	stPump.rLoad:= 0;
END_IF
stPump.tonOvrLd.IN := stPump.rLoad >= stPump.rMaxLoad;
stPump.tonOvrLd.PT := OverloadTime;
stPump.tonOvrLd();
xOverloaded := stPump.tonOvrLd.Q;

(* Heating up! *)
(*
You don't want to run your pump at high load for a long time, or else it will heat up and die.
If cooling is active, then the heating up threshold is raised and the time to heat overload is increased.
*)
stPump.tonTemp.PT := OverTempTime;
IF stPump.xCooling THEN
	stPump.tonTemp.PT := OverTempTime*2;
	stPump.tonTemp.IN := stPump.rLoad >= 0.8;
ELSE
	stPump.tonTemp.IN := stPump.rLoad >= 0.6;
END_IF
stPump.tonTemp();


(* Mass Removal Rate *)
(*
MRR is scaled by the current speed/ max speed. This might not be the best assumption, but it's all we got for now.
*)
stPump.rMRE := INT_TO_REAL( stPump.q_iSpeed ) /INT_TO_REAL(stPump.iMaxSpd) * rMaxMRR;

(* Error *)
(*
Your pump has pizza'd when it should've french fried...
Set error flag, reset when run goes high... for now...
*)
stPump.srError.SET1 := xOverloaded OR stPump.tonTemp.Q;
stPump.rtResetErr.CLK := stPump.i_xRun;
stPump.rtResetErr();
stPump.srError.RESET := stPump.rtResetErr.Q;
stPump.srError();
stPump.q_xErr := stPump.srError.Q1;
local :=stPump.i_xRun AND NOT stPump.q_xErr;
xPump := stPump.i_xRun AND NOT stPump.q_xErr;

(* Pumping *)
IF xPump THEN
	rInletPressDelta := stVlInlet.rPressure; //the current pressure so we can find the delta further down
	// mre should become a function of inlet and outlet pressure.
	//If the chamber pressure is lower than the pump base pressure, no pumping can occur because the mass removal efficiency effectively drops to zero.
	IF stVlInlet.rPressure > stPump.rBasePress THEN
		stVlInlet.rPressure := MAX( stPump.rBasePress, 
								stVlInlet.rPressure * (1 - stPump.rMRE/stVlInlet.rVolume) );
	END_IF
	rInletPressDelta := rInletPressDelta - stVlInlet.rPressure;
	// The total mass that was transfered through the pump
	rMassTrans	:= rInletPressDelta*stVlInlet.rVolume;
	// The outlet of the pump should be seeing whatever was removed from the inlet.
	stVlOutlet.rPressure := (rMassTrans + stVlOutlet.rPressure*stVlOutlet.rVolume)/
							(stVlOutlet.rVolume); //note, only use the outlet volume because the pump is running
ELSE //treat the pump like an open valve
	stVlOutlet.rPressure := (stVlInlet.rPressure*stVlInlet.rVolume + stVlOutlet.rPressure*stVlOutlet.rVolume)/
							(stVlInlet.rVolume+stVlOutlet.rVolume);
	stVlInlet.rPressure := stVlOutlet.rPressure; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TurboPump">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TurboPump.PumpLogic">
      <LineId Id="3" Count="33" />
      <LineId Id="111" Count="1" />
      <LineId Id="114" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="37" Count="32" />
      <LineId Id="116" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="8" />
      <LineId Id="102" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="83" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>